name: API Validation and Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  api-validation:
    runs-on: ubuntu-latest

    services:
      # 可以添加数据库等服务

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache uv dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install uv
      uses: astral-sh/setup-uv@v1

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Start API server
      run: |
        uv run uvicorn src.api.main:app --host 0.0.0.0 --port 8000 &
        sleep 10  # 等待服务器启动

    - name: Run API parameter validation
      run: |
        uv run python scripts/validate_openapi.py --strict --output api_validation_report.json

    - name: Run API health check
      run: |
        uv run python scripts/api_health_monitor.py --once --output health_reports

    - name: Run pytest with API validation
      run: |
        uv run pytest tests/validation/test_api_parameters.py -v --tb=short

    - name: Upload validation reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: api-validation-reports
        path: |
          api_validation_report.json
          health_reports/

    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');

          // 读取验证报告
          let validationReport = null;
          let healthReport = null;

          try {
            validationReport = JSON.parse(fs.readFileSync('api_validation_report.json', 'utf8'));
          } catch (e) {
            console.log('No validation report found');
          }

          // 构建评论内容
          let comment = '## 🔍 API验证结果\n\n';

          if (validationReport) {
            if (validationReport.validation_passed) {
              comment += '✅ **OpenAPI验证通过**\n\n';
            } else {
              comment += '❌ **OpenAPI验证失败**\n\n';
              comment += '**错误:**\n';
              validationReport.errors.forEach(error => {
                comment += `- ${error}\n`;
              });
            }

            if (validationReport.warnings.length > 0) {
              comment += '\n⚠️ **警告:**\n';
              validationReport.warnings.forEach(warning => {
                comment += `- ${warning}\n`;
              });
            }
          }

          comment += '\n---\n';
          comment += '*此评论由API验证工作流自动生成*';

          // 创建或更新评论
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Check validation results
      run: |
        if [ -f "api_validation_report.json" ]; then
          if grep -q '"validation_passed": false' api_validation_report.json; then
            echo "❌ API验证失败，请检查错误并修复"
            exit 1
          fi
        else
          echo "❌ 未找到验证报告"
          exit 1
        fi

    - name: Run additional API tests
      run: |
        uv run pytest tests/e2e/test_api_coverage.py -v

  performance-check:
    runs-on: ubuntu-latest
    needs: api-validation

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v1

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Start API server
      run: |
        uv run uvicorn src.api.main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: Run performance tests
      run: |
        uv run pytest tests/e2e/test_api_coverage.py::TestAPICoverage::test_response_time_performance -v

    - name: Run load tests
      run: |
        uv run pytest tests/e2e/test_api_coverage.py::TestAPICoverage::test_concurrent_users -v