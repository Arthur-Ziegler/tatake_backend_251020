# 零Bug测试体系 - pytest配置
# 严格的测试执行标准和质量门禁

[tool:pytest]
# 测试目录结构
testpaths =
    tests/unit
    tests/integration
    tests/e2e
    tests/scenarios

# 最低pytest版本要求
minversion = 8.0

# 零Bug测试标记系统
markers =
    # 测试层级标记
    unit: 单元测试 - 测试单个函数或类，快速隔离
    integration: 集成测试 - 测试模块间协作，需要数据库
    e2e: 端到端测试 - 测试完整用户场景，需要完整环境

    # 测试类型标记
    performance: 性能测试 - 基准测试和性能回归
    security: 安全测试 - 漏洞扫描和安全验证
    smoke: 冒烟测试 - 核心功能快速验证
    regression: 回归测试 - 历史bug验证

    # 执行特性标记
    slow: 慢速测试 - 执行时间超过30秒
    fast: 快速测试 - 执行时间少于1秒
    database: 需要数据库的测试
    external: 需要外部服务的测试
    concurrent: 并发测试

    # 质量标记
    critical: 关键测试 - 不允许失败
    flaky: 不稳定测试 - 需要修复

    # 功能域标记
    auth: 认证相关测试
    task: 任务管理测试
    reward: 奖励系统测试
    focus: 专注系统测试
    user: 用户管理测试
    points: 积分系统测试
    top3: Top3系统测试
    chat: 聊天系统测试

# 自动发现模式
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# 零Bug测试输出配置
addopts =
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov-zero-bug
    --cov-report=xml:coverage-zero-bug.xml
    --cov-fail-under=95
    --cov-report=term-missing:skip-covered
    --maxfail=5
    --disable-warnings
    --durations=10
    --color=yes
    -m "not slow"

# 失败后的严格处理
faulthandler_trace = true
xfail_strict = true
addopts += --runxfail

# 测试发现排除
norecursedirs =
    .git
    .tox
    dist
    build
    *.egg
    __pycache__
    .pytest_cache
    htmlcov-zero-bug
    .coverage
    tests/archive
    tests/fixtures
    tests/factories
    tests/utils

# 严格的警告过滤
filterwarnings =
    error::DeprecationWarning
    error::PendingDeprecationWarning
    error::ImportWarning
    error::UserWarning:src.*
    ignore::pytest.PytestUnraisableExceptionWarning
    ignore::pytest.PytestUnhandledThreadExceptionWarning

# 零Bug日志配置
log_cli = true
log_cli_level = WARNING
log_file = tests/zero-bug-test-results.log
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s %(message)s
log_file_format = %(asctime)s [%(levelname)8s] %(name)s %(message)s (%(filename)s:%(lineno)s)

# 并发执行配置
workers = auto

# 测试超时设置
timeout = 300
timeout_method = thread

# 零Bug覆盖率标准
[coverage:run]
# 覆盖率源代码
source = src

# 排除不需要覆盖的文件
omit =
    */tests/*
    */migrations/*
    */venv/*
    */__pycache__/*
    */conftest.py
    */factories/*
    */fixtures/*
    */test_*.py
    */archive/*
    */__init__.py

# 分支覆盖
branch = True

# 行覆盖率要求
fail_under = 95

# 源代码包含模式
include =
    src/**/*.py

# 零Bug覆盖率报告配置
[coverage:report]
# 排除行
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == "__main__":
    if TYPE_CHECKING:
    class .*\(Protocol\):
    @(abc\.)?abstractmethod
    ^\s*\.\.\.$
    ^\s*pass\s*$

# 部分覆盖行
partial_branches =
    raise NotImplementedError
    raise AssertionError
    if TYPE_CHECKING:

# HTML报告配置
html_title = 零Bug测试体系 - TaKeKe API 覆盖率报告
show_contexts = True
skip_covered = False
skip_empty = False

# XML报告
xml_output = coverage-zero-bug.xml

# 精确度设置
precision = 2

# 零Bug性能基准
[benchmark]
# 单元测试性能基准
unit_test_max_time = 1.0
integration_test_max_time = 10.0
e2e_test_max_time = 60.0
total_test_max_time = 1800.0

# 零Bug质量门禁
[quality-gates]
# 必须通过的测试标记
required_markers = unit

# 禁止在CI中运行的标记
ci_exclude_markers = slow, external

# 覆盖率阈值
coverage_threshold = 95.0
branch_coverage_threshold = 90.0

# 复杂度限制
max_complexity = 10

# 测试稳定性要求
max_flaky_rate = 0.001