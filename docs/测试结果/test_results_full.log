============================= test session starts ==============================
platform darwin -- Python 3.12.11, pytest-8.4.2, pluggy-1.6.0 -- /Users/zalelee/Code/tatake_backend/.venv/bin/python3
cachedir: .pytest_cache
rootdir: /Users/zalelee/Code/tatake_backend
configfile: pyproject.toml
testpaths: tests
plugins: mock-3.15.1, asyncio-1.2.0, anyio-4.11.0, langsmith-0.4.37, cov-7.0.0
asyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 600 items

tests/database/test_connection.py::TestDatabaseConnection::test_database_connection_exists PASSED [  0%]
tests/database/test_connection.py::TestDatabaseConnection::test_database_connection_default_configuration PASSED [  0%]
tests/database/test_connection.py::TestDatabaseConnection::test_database_connection_custom_configuration PASSED [  0%]
tests/database/test_connection.py::TestDatabaseConnection::test_get_engine_creates_engine FAILED [  0%]
tests/database/test_connection.py::TestDatabaseConnection::test_get_engine_returns_same_instance PASSED [  0%]
tests/database/test_connection.py::TestDatabaseConnection::test_get_session_creates_session PASSED [  1%]
tests/database/test_connection.py::TestDatabaseConnection::test_get_session_context_manager PASSED [  1%]
tests/database/test_connection.py::TestDatabaseConnection::test_environment_variable_override PASSED [  1%]
tests/database/test_connection.py::TestDatabaseConnection::test_get_engine_function PASSED [  1%]
tests/database/test_connection.py::TestDatabaseConnection::test_get_session_function PASSED [  1%]
tests/database/test_connection.py::TestDatabaseConnection::test_database_connection_with_postgresql_url FAILED [  1%]
tests/database/test_connection.py::TestDatabaseConnection::test_database_connection_with_mysql_config FAILED [  2%]
tests/database/test_connection.py::TestDatabaseConnection::test_engine_configuration_for_sqlite PASSED [  2%]
tests/database/test_connection.py::TestDatabaseConnection::test_engine_other_exceptions FAILED [  2%]
tests/database/test_integration.py::TestDatabaseIntegration::test_table_creation PASSED [  2%]
tests/database/test_integration.py::TestDatabaseIntegration::test_task_model_database_operations FAILED [  2%]
tests/database/test_integration.py::TestDatabaseIntegration::test_json_field_operations FAILED [  2%]
tests/database/test_integration.py::TestDatabaseIntegration::test_sum_aggregation_query FAILED [  3%]
tests/database/test_integration.py::TestDatabaseIntegration::test_unique_constraint FAILED [  3%]
tests/database/test_integration.py::TestDatabaseIntegration::test_transaction_rollback FAILED [  3%]
tests/database/test_integration.py::TestDatabaseIntegration::test_foreign_key_constraints FAILED [  3%]
tests/database/test_integration.py::TestDatabaseIntegration::test_json_field_complex_structure FAILED [  3%]
tests/database/test_integration.py::TestDatabaseIntegration::test_database_connection_stability PASSED [  3%]
tests/database/test_integration.py::TestDatabaseIntegration::test_datetime_timezone_consistency FAILED [  4%]
tests/domains/auth/test_auth_models.py::TestAuthModel::test_auth_model_creation PASSED [  4%]
tests/domains/auth/test_auth_models.py::TestAuthModel::test_auth_model_with_wechat_user PASSED [  4%]
tests/domains/auth/test_auth_models.py::TestAuthModel::test_auth_model_timestamps PASSED [  4%]
tests/domains/auth/test_auth_models.py::TestAuthModel::test_auth_model_string_representation PASSED [  4%]
tests/domains/auth/test_auth_models.py::TestAuthLogModel::test_auth_log_model_creation PASSED [  4%]
tests/domains/auth/test_auth_models.py::TestAuthLogModel::test_auth_log_different_actions PASSED [  5%]
tests/domains/auth/test_auth_models.py::TestAuthLogModel::test_auth_log_optional_fields PASSED [  5%]
tests/domains/auth/test_auth_models.py::TestAuthLogModel::test_auth_log_timestamps PASSED [  5%]
tests/domains/auth/test_auth_models.py::TestAuthLogModel::test_auth_log_string_representation PASSED [  5%]
tests/domains/auth/test_auth_repository.py::TestAuthRepository::test_create_guest_user PASSED [  5%]
tests/domains/auth/test_auth_repository.py::TestAuthRepository::test_create_registered_user PASSED [  5%]
tests/domains/auth/test_auth_repository.py::TestAuthRepository::test_get_user_by_id_not_found PASSED [  6%]
tests/domains/auth/test_auth_repository.py::TestAuthRepository::test_get_user_by_wechat_not_found PASSED [  6%]
tests/domains/auth/test_auth_repository.py::TestAuthRepository::test_upgrade_guest_to_registered PASSED [  6%]
tests/domains/auth/test_auth_repository.py::TestAuditRepository::test_create_auth_log PASSED [  6%]
tests/domains/auth/test_auth_repository.py::TestAuditRepository::test_get_logs_by_auth_id PASSED [  6%]
tests/domains/auth/test_auth_repository.py::TestAuditRepository::test_create_multiple_logs_for_different_users PASSED [  6%]
tests/domains/auth/test_auth_repository.py::TestAuditRepository::test_create_log_with_minimal_data PASSED [  7%]
tests/domains/auth/test_auth_repository.py::TestAuthRepositoryIntegration::test_user_lifecycle_with_audit_trail PASSED [  7%]
tests/domains/auth/test_auth_service.py::TestAuthService::test_init_guest_account PASSED [  7%]
tests/domains/auth/test_auth_service.py::TestAuthService::test_wechat_register_success PASSED [  7%]
tests/domains/auth/test_auth_service.py::TestAuthService::test_wechat_register_duplicate_openid PASSED [  7%]
tests/domains/auth/test_auth_service.py::TestAuthService::test_wechat_login_success PASSED [  7%]
tests/domains/auth/test_auth_service.py::TestAuthService::test_wechat_login_user_not_found PASSED [  8%]
tests/domains/auth/test_auth_service.py::TestAuthService::test_upgrade_guest_account_success PASSED [  8%]
tests/domains/auth/test_auth_service.py::TestAuthService::test_upgrade_guest_account_invalid_user PASSED [  8%]
tests/domains/auth/test_auth_service.py::TestAuthService::test_upgrade_guest_account_duplicate_openid PASSED [  8%]
tests/domains/auth/test_auth_service.py::TestAuthService::test_refresh_token_success PASSED [  8%]
tests/domains/auth/test_auth_service.py::TestAuthService::test_refresh_token_invalid PASSED [  8%]
tests/domains/auth/test_auth_service.py::TestJWTService::test_generate_tokens PASSED [  9%]
tests/domains/auth/test_auth_service.py::TestJWTService::test_verify_access_token_success PASSED [  9%]
tests/domains/auth/test_auth_service.py::TestJWTService::test_verify_refresh_token_success PASSED [  9%]
tests/domains/auth/test_auth_service.py::TestJWTService::test_verify_token_type_mismatch PASSED [  9%]
tests/domains/auth/test_auth_service.py::TestJWTService::test_verify_invalid_token PASSED [  9%]
tests/domains/auth/test_auth_service.py::TestAuthServiceIntegration::test_complete_user_lifecycle PASSED [  9%]
tests/domains/auth/test_auth_service.py::TestAuthServiceIntegration::test_token_expiration PASSED [ 10%]
tests/domains/auth/test_auth_service.py::TestAuthServiceSecurity::test_jwt_token_payload_security PASSED [ 10%]
tests/domains/auth/test_auth_service.py::TestAuthServiceSecurity::test_token_version_mismatch_protection PASSED [ 10%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseModule::test_get_chat_database_path_default PASSED [ 10%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseModule::test_get_chat_database_path_absolute FAILED [ 10%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseModule::test_create_memory_store PASSED [ 10%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseModule::test_check_connection_no_file PASSED [ 11%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseModule::test_check_connection_success PASSED [ 11%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseModule::test_check_connection_corrupted_file PASSED [ 11%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseModule::test_get_database_info_no_file PASSED [ 11%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseModule::test_get_database_info_with_file FAILED [ 11%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseModule::test_create_tables_success FAILED [ 11%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseModule::test_create_tables_failure PASSED [ 12%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseManager::test_manager_initialization PASSED [ 12%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseManager::test_manager_create_checkpointer FAILED [ 12%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseManager::test_manager_get_store PASSED [ 12%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseManager::test_health_check_healthy FAILED [ 12%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseManager::test_health_check_no_file PASSED [ 12%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseManager::test_health_check_corrupted_file PASSED [ 13%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseManager::test_cleanup FAILED [ 13%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseManager::test_cleanup_error_handling PASSED [ 13%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseIntegration::test_end_to_end_workflow FAILED [ 13%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseIntegration::test_multiple_manager_instances PASSED [ 13%]
tests/domains/chat/test_chat_database.py::TestChatDatabaseIntegration::test_concurrent_access FAILED [ 13%]

=================================== FAILURES ===================================
____________ TestDatabaseConnection.test_get_engine_creates_engine _____________
tests/database/test_connection.py:52: in test_get_engine_creates_engine
    assert engine.url.database == ":memory:"
E   AssertionError: assert './tatake.db' == ':memory:'
E     
E     - :memory:
E     + ./tatake.db
_____ TestDatabaseConnection.test_database_connection_with_postgresql_url ______
tests/database/test_connection.py:122: in test_database_connection_with_postgresql_url
    assert "test_postgres_simulation.db" in str(engine.url)
E   AssertionError: assert 'test_postgres_simulation.db' in 'sqlite:///./tatake.db'
E    +  where 'sqlite:///./tatake.db' = str(sqlite:///./tatake.db)
E    +    where sqlite:///./tatake.db = Engine(sqlite:///./tatake.db).url
______ TestDatabaseConnection.test_database_connection_with_mysql_config _______
tests/database/test_connection.py:132: in test_database_connection_with_mysql_config
    assert db.database_url.startswith("mysql")
E   AssertionError: assert False
E    +  where False = <built-in method startswith of str object at 0x1123eb6b0>('mysql')
E    +    where <built-in method startswith of str object at 0x1123eb6b0> = 'sqlite:///./tatake.db'.startswith
E    +      where 'sqlite:///./tatake.db' = <src.database.connection.DatabaseConnection object at 0x112462ba0>.database_url
_____________ TestDatabaseConnection.test_engine_other_exceptions ______________
tests/database/test_connection.py:158: in test_engine_other_exceptions
    with pytest.raises(Exception):
         ^^^^^^^^^^^^^^^^^^^^^^^^
E   Failed: DID NOT RAISE <class 'Exception'>
_________ TestDatabaseIntegration.test_task_model_database_operations __________
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
    cursor.execute(statement, parameters)
E   sqlite3.ProgrammingError: Error binding parameter 1: type 'UUID' is not supported

The above exception was the direct cause of the following exception:
tests/database/test_integration.py:76: in test_task_model_database_operations
    session.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2030: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:137: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1311: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:137: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1286: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4331: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4466: in _flush
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4427: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1048: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.ProgrammingError: (sqlite3.ProgrammingError) Error binding parameter 1: type 'UUID' is not supported
E   [SQL: INSERT INTO tasks (id, created_at, updated_at, user_id, title, description, parent_id, status, priority, is_deleted, completion_percentage, last_claimed_date, tags, service_ids, due_date, planned_start_time, planned_end_time) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
E   [parameters: (UUID('7880ef6c-fb44-466c-bc93-48d75f8a8bae'), '2025-10-24 03:11:32.258301', '2025-10-24 03:11:32.258310', UUID('0a5e90ab-a662-48ed-9252-4f0bf73575fe'), '数据库集成测试任务', '测试数据库操作', None, 'pending', 'medium', 0, 0.0, None, '["\\u6d4b\\u8bd5", "\\u96c6\\u6210"]', '["service-001"]', None, None, None)]
E   (Background on this error at: https://sqlalche.me/e/20/f405)
----------------------------- Captured stdout call -----------------------------
2025-10-24 11:11:32,254 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-10-24 11:11:32,254 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("auth")
2025-10-24 11:11:32,254 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,254 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("auth_audit_logs")
2025-10-24 11:11:32,254 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,254 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("tasks")
2025-10-24 11:11:32,254 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,254 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("rewards")
2025-10-24 11:11:32,254 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,255 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("reward_recipes")
2025-10-24 11:11:32,255 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,255 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("reward_transactions")
2025-10-24 11:11:32,255 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,255 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("points_transactions")
2025-10-24 11:11:32,255 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,255 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("task_top3")
2025-10-24 11:11:32,255 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,255 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("focus_sessions")
2025-10-24 11:11:32,255 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,255 INFO sqlalchemy.engine.Engine COMMIT
2025-10-24 11:11:32,258 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-10-24 11:11:32,260 INFO sqlalchemy.engine.Engine INSERT INTO tasks (id, created_at, updated_at, user_id, title, description, parent_id, status, priority, is_deleted, completion_percentage, last_claimed_date, tags, service_ids, due_date, planned_start_time, planned_end_time) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-24 11:11:32,260 INFO sqlalchemy.engine.Engine [generated in 0.00021s] (UUID('7880ef6c-fb44-466c-bc93-48d75f8a8bae'), '2025-10-24 03:11:32.258301', '2025-10-24 03:11:32.258310', UUID('0a5e90ab-a662-48ed-9252-4f0bf73575fe'), '数据库集成测试任务', '测试数据库操作', None, 'pending', 'medium', 0, 0.0, None, '["\\u6d4b\\u8bd5", "\\u96c6\\u6210"]', '["service-001"]', None, None, None)
2025-10-24 11:11:32,260 INFO sqlalchemy.engine.Engine ROLLBACK
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2702 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("auth")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("auth_audit_logs")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("tasks")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("rewards")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("reward_recipes")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("reward_transactions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("points_transactions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("task_top3")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("focus_sessions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2708 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2702 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1846 INSERT INTO tasks (id, created_at, updated_at, user_id, title, description, parent_id, status, priority, is_deleted, completion_percentage, last_claimed_date, tags, service_ids, due_date, planned_start_time, planned_end_time) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
INFO     sqlalchemy.engine.Engine:base.py:1846 [generated in 0.00021s] (UUID('7880ef6c-fb44-466c-bc93-48d75f8a8bae'), '2025-10-24 03:11:32.258301', '2025-10-24 03:11:32.258310', UUID('0a5e90ab-a662-48ed-9252-4f0bf73575fe'), '数据库集成测试任务', '测试数据库操作', None, 'pending', 'medium', 0, 0.0, None, '["\\u6d4b\\u8bd5", "\\u96c6\\u6210"]', '["service-001"]', None, None, None)
INFO     sqlalchemy.engine.Engine:base.py:2705 ROLLBACK
______________ TestDatabaseIntegration.test_json_field_operations ______________
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
    cursor.execute(statement, parameters)
E   sqlite3.IntegrityError: NOT NULL constraint failed: rewards.cost_type

The above exception was the direct cause of the following exception:
tests/database/test_integration.py:107: in test_json_field_operations
    session.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2030: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:137: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1311: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:137: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1286: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4331: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4466: in _flush
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4427: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1048: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) NOT NULL constraint failed: rewards.cost_type
E   [SQL: INSERT INTO rewards (id, name, description, points_value, image_url, cost_type, cost_value, stock_quantity, category, is_active, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
E   [parameters: ('99aee8b7e9b84f75a6141ae0b441c27a', 'JSON测试奖励', '测试JSON字段', 100, None, None, None, 0, None, 1, '2025-10-24 03:11:32.485763', '2025-10-24 03:11:32.485771')]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)
----------------------------- Captured stdout call -----------------------------
2025-10-24 11:11:32,484 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-10-24 11:11:32,484 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("auth")
2025-10-24 11:11:32,484 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,484 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("auth_audit_logs")
2025-10-24 11:11:32,484 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,484 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("tasks")
2025-10-24 11:11:32,484 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,484 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("rewards")
2025-10-24 11:11:32,484 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,485 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("reward_recipes")
2025-10-24 11:11:32,485 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,485 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("reward_transactions")
2025-10-24 11:11:32,485 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,485 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("points_transactions")
2025-10-24 11:11:32,485 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,485 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("task_top3")
2025-10-24 11:11:32,485 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,485 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("focus_sessions")
2025-10-24 11:11:32,485 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,485 INFO sqlalchemy.engine.Engine COMMIT
2025-10-24 11:11:32,485 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-10-24 11:11:32,486 INFO sqlalchemy.engine.Engine INSERT INTO rewards (id, name, description, points_value, image_url, cost_type, cost_value, stock_quantity, category, is_active, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-24 11:11:32,486 INFO sqlalchemy.engine.Engine [generated in 0.00010s] ('99aee8b7e9b84f75a6141ae0b441c27a', 'JSON测试奖励', '测试JSON字段', 100, None, None, None, 0, None, 1, '2025-10-24 03:11:32.485763', '2025-10-24 03:11:32.485771')
2025-10-24 11:11:32,486 INFO sqlalchemy.engine.Engine ROLLBACK
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2702 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("auth")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("auth_audit_logs")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("tasks")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("rewards")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("reward_recipes")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("reward_transactions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("points_transactions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("task_top3")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("focus_sessions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2708 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2702 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1846 INSERT INTO rewards (id, name, description, points_value, image_url, cost_type, cost_value, stock_quantity, category, is_active, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
INFO     sqlalchemy.engine.Engine:base.py:1846 [generated in 0.00010s] ('99aee8b7e9b84f75a6141ae0b441c27a', 'JSON测试奖励', '测试JSON字段', 100, None, None, None, 0, None, 1, '2025-10-24 03:11:32.485763', '2025-10-24 03:11:32.485771')
INFO     sqlalchemy.engine.Engine:base.py:2705 ROLLBACK
______________ TestDatabaseIntegration.test_sum_aggregation_query ______________
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1936: in _exec_single_context
    self.dialect.do_executemany(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:948: in do_executemany
    cursor.executemany(statement, parameters)
E   sqlite3.ProgrammingError: Error binding parameter 3: type 'UUID' is not supported

The above exception was the direct cause of the following exception:
tests/database/test_integration.py:164: in test_sum_aggregation_query
    session.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2030: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:137: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1311: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:137: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1286: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4331: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4466: in _flush
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4427: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1048: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1936: in _exec_single_context
    self.dialect.do_executemany(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:948: in do_executemany
    cursor.executemany(statement, parameters)
E   sqlalchemy.exc.ProgrammingError: (sqlite3.ProgrammingError) Error binding parameter 3: type 'UUID' is not supported
E   [SQL: INSERT INTO points_transactions (id, updated_at, user_id, amount, source_type, source_id, created_at) VALUES (?, ?, ?, ?, ?, ?, ?)]
E   [parameters: [('8e165021f68b4ebd80f32b851df35ebd', '2025-10-24 03:11:32.713929', UUID('c3512960-3fd5-46f7-add8-08d11a7f67c8'), 100, 'task_complete', None, '2025-10-24 03:11:32.713921'), ('9b9621cb22604831b2fa6ef363766174', '2025-10-24 03:11:32.714013', UUID('c3512960-3fd5-46f7-add8-08d11a7f67c8'), -50, 'top3_cost', None, '2025-10-24 03:11:32.714008'), ('ac6e39c506c34e5ca297d4c459b99be3', '2025-10-24 03:11:32.714061', UUID('c3512960-3fd5-46f7-add8-08d11a7f67c8'), 25, 'task_complete_top3', None, '2025-10-24 03:11:32.714056')]]
E   (Background on this error at: https://sqlalche.me/e/20/f405)
----------------------------- Captured stdout call -----------------------------
2025-10-24 11:11:32,712 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-10-24 11:11:32,712 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("auth")
2025-10-24 11:11:32,712 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,712 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("auth_audit_logs")
2025-10-24 11:11:32,712 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,712 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("tasks")
2025-10-24 11:11:32,712 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,713 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("rewards")
2025-10-24 11:11:32,713 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,713 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("reward_recipes")
2025-10-24 11:11:32,713 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,713 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("reward_transactions")
2025-10-24 11:11:32,713 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,713 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("points_transactions")
2025-10-24 11:11:32,713 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,713 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("task_top3")
2025-10-24 11:11:32,713 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,713 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("focus_sessions")
2025-10-24 11:11:32,713 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,713 INFO sqlalchemy.engine.Engine COMMIT
2025-10-24 11:11:32,714 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-10-24 11:11:32,714 INFO sqlalchemy.engine.Engine INSERT INTO points_transactions (id, updated_at, user_id, amount, source_type, source_id, created_at) VALUES (?, ?, ?, ?, ?, ?, ?)
2025-10-24 11:11:32,714 INFO sqlalchemy.engine.Engine [generated in 0.00009s] [('8e165021f68b4ebd80f32b851df35ebd', '2025-10-24 03:11:32.713929', UUID('c3512960-3fd5-46f7-add8-08d11a7f67c8'), 100, 'task_complete', None, '2025-10-24 03:11:32.713921'), ('9b9621cb22604831b2fa6ef363766174', '2025-10-24 03:11:32.714013', UUID('c3512960-3fd5-46f7-add8-08d11a7f67c8'), -50, 'top3_cost', None, '2025-10-24 03:11:32.714008'), ('ac6e39c506c34e5ca297d4c459b99be3', '2025-10-24 03:11:32.714061', UUID('c3512960-3fd5-46f7-add8-08d11a7f67c8'), 25, 'task_complete_top3', None, '2025-10-24 03:11:32.714056')]
2025-10-24 11:11:32,715 INFO sqlalchemy.engine.Engine ROLLBACK
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2702 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("auth")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("auth_audit_logs")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("tasks")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("rewards")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("reward_recipes")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("reward_transactions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("points_transactions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("task_top3")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("focus_sessions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2708 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2702 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1846 INSERT INTO points_transactions (id, updated_at, user_id, amount, source_type, source_id, created_at) VALUES (?, ?, ?, ?, ?, ?, ?)
INFO     sqlalchemy.engine.Engine:base.py:1846 [generated in 0.00009s] [('8e165021f68b4ebd80f32b851df35ebd', '2025-10-24 03:11:32.713929', UUID('c3512960-3fd5-46f7-add8-08d11a7f67c8'), 100, 'task_complete', None, '2025-10-24 03:11:32.713921'), ('9b9621cb22604831b2fa6ef363766174', '2025-10-24 03:11:32.714013', UUID('c3512960-3fd5-46f7-add8-08d11a7f67c8'), -50, 'top3_cost', None, '2025-10-24 03:11:32.714008'), ('ac6e39c506c34e5ca297d4c459b99be3', '2025-10-24 03:11:32.714061', UUID('c3512960-3fd5-46f7-add8-08d11a7f67c8'), 25, 'task_complete_top3', None, '2025-10-24 03:11:32.714056')]
INFO     sqlalchemy.engine.Engine:base.py:2705 ROLLBACK
________________ TestDatabaseIntegration.test_unique_constraint ________________
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
    cursor.execute(statement, parameters)
E   sqlite3.ProgrammingError: Error binding parameter 1: type 'UUID' is not supported

The above exception was the direct cause of the following exception:
tests/database/test_integration.py:198: in test_unique_constraint
    session.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2030: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:137: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1311: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:137: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1286: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4331: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4466: in _flush
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4427: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1048: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.ProgrammingError: (sqlite3.ProgrammingError) Error binding parameter 1: type 'UUID' is not supported
E   [SQL: INSERT INTO task_top3 (id, created_at, updated_at, user_id, top_date, task_ids, points_consumed) VALUES (?, ?, ?, ?, ?, ?, ?)]
E   [parameters: (UUID('82863b38-074e-433e-b7bf-619a99e239df'), '2025-10-24 03:11:32.937257', '2025-10-24 03:11:32.937265', UUID('92294215-3ca3-4cf1-bfdb-84955b5949cc'), '2023-12-25', '["8a87a1bf-daca-4d5c-ab29-5887d566128d"]', 300)]
E   (Background on this error at: https://sqlalche.me/e/20/f405)
----------------------------- Captured stdout call -----------------------------
2025-10-24 11:11:32,935 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-10-24 11:11:32,936 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("auth")
2025-10-24 11:11:32,936 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,936 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("auth_audit_logs")
2025-10-24 11:11:32,936 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,936 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("tasks")
2025-10-24 11:11:32,936 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,936 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("rewards")
2025-10-24 11:11:32,936 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,936 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("reward_recipes")
2025-10-24 11:11:32,936 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,936 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("reward_transactions")
2025-10-24 11:11:32,936 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,936 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("points_transactions")
2025-10-24 11:11:32,936 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,936 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("task_top3")
2025-10-24 11:11:32,936 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,936 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("focus_sessions")
2025-10-24 11:11:32,937 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:32,937 INFO sqlalchemy.engine.Engine COMMIT
2025-10-24 11:11:32,937 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-10-24 11:11:32,938 INFO sqlalchemy.engine.Engine INSERT INTO task_top3 (id, created_at, updated_at, user_id, top_date, task_ids, points_consumed) VALUES (?, ?, ?, ?, ?, ?, ?)
2025-10-24 11:11:32,938 INFO sqlalchemy.engine.Engine [generated in 0.00010s] (UUID('82863b38-074e-433e-b7bf-619a99e239df'), '2025-10-24 03:11:32.937257', '2025-10-24 03:11:32.937265', UUID('92294215-3ca3-4cf1-bfdb-84955b5949cc'), '2023-12-25', '["8a87a1bf-daca-4d5c-ab29-5887d566128d"]', 300)
2025-10-24 11:11:32,938 INFO sqlalchemy.engine.Engine ROLLBACK
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2702 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("auth")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("auth_audit_logs")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("tasks")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("rewards")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("reward_recipes")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("reward_transactions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("points_transactions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("task_top3")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("focus_sessions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2708 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2702 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1846 INSERT INTO task_top3 (id, created_at, updated_at, user_id, top_date, task_ids, points_consumed) VALUES (?, ?, ?, ?, ?, ?, ?)
INFO     sqlalchemy.engine.Engine:base.py:1846 [generated in 0.00010s] (UUID('82863b38-074e-433e-b7bf-619a99e239df'), '2025-10-24 03:11:32.937257', '2025-10-24 03:11:32.937265', UUID('92294215-3ca3-4cf1-bfdb-84955b5949cc'), '2023-12-25', '["8a87a1bf-daca-4d5c-ab29-5887d566128d"]', 300)
INFO     sqlalchemy.engine.Engine:base.py:2705 ROLLBACK
______________ TestDatabaseIntegration.test_transaction_rollback _______________
tests/database/test_integration.py:223: in test_transaction_rollback
    initial_count = session.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2351: in execute
    return self._execute_internal(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2147: in _execute_internal
    statement = coercions.expect(roles.StatementRole, statement)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/sql/coercions.py:395: in expect
    resolved = impl._literal_coercion(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/coercions.py:621: in _literal_coercion
    return self._text_coercion(element, argname, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/sql/coercions.py:614: in _text_coercion
    return _no_text_coercion(element, argname)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/sql/coercions.py:584: in _no_text_coercion
    raise exc_cls(
E   sqlalchemy.exc.ArgumentError: Textual SQL expression 'SELECT COUNT(*) FROM rewa...' should be explicitly declared as text('SELECT COUNT(*) FROM rewa...')
----------------------------- Captured stdout call -----------------------------
2025-10-24 11:11:33,158 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-10-24 11:11:33,159 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("auth")
2025-10-24 11:11:33,159 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,159 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("auth_audit_logs")
2025-10-24 11:11:33,159 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,159 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("tasks")
2025-10-24 11:11:33,159 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,159 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("rewards")
2025-10-24 11:11:33,159 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,159 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("reward_recipes")
2025-10-24 11:11:33,159 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,159 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("reward_transactions")
2025-10-24 11:11:33,159 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,159 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("points_transactions")
2025-10-24 11:11:33,159 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,159 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("task_top3")
2025-10-24 11:11:33,159 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,160 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("focus_sessions")
2025-10-24 11:11:33,160 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,160 INFO sqlalchemy.engine.Engine COMMIT
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2702 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("auth")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("auth_audit_logs")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("tasks")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("rewards")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("reward_recipes")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("reward_transactions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("points_transactions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("task_top3")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("focus_sessions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2708 COMMIT
_____________ TestDatabaseIntegration.test_foreign_key_constraints _____________
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
    cursor.execute(statement, parameters)
E   sqlite3.IntegrityError: NOT NULL constraint failed: rewards.cost_type

The above exception was the direct cause of the following exception:
tests/database/test_integration.py:265: in test_foreign_key_constraints
    session.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2030: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:137: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1311: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:137: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1286: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4331: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4466: in _flush
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4427: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1048: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) NOT NULL constraint failed: rewards.cost_type
E   [SQL: INSERT INTO rewards (id, name, description, points_value, image_url, cost_type, cost_value, stock_quantity, category, is_active, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
E   [parameters: ('1ae36096827d424bb006bbc61cd8fe48', '外键测试奖励', None, 50, None, None, None, 0, None, 1, '2025-10-24 03:11:33.215691', '2025-10-24 03:11:33.215699')]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)
----------------------------- Captured stdout call -----------------------------
2025-10-24 11:11:33,214 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-10-24 11:11:33,214 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("auth")
2025-10-24 11:11:33,214 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,214 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("auth_audit_logs")
2025-10-24 11:11:33,214 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,214 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("tasks")
2025-10-24 11:11:33,214 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,214 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("rewards")
2025-10-24 11:11:33,214 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,215 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("reward_recipes")
2025-10-24 11:11:33,215 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,215 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("reward_transactions")
2025-10-24 11:11:33,215 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,215 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("points_transactions")
2025-10-24 11:11:33,215 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,215 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("task_top3")
2025-10-24 11:11:33,215 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,215 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("focus_sessions")
2025-10-24 11:11:33,215 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,215 INFO sqlalchemy.engine.Engine COMMIT
2025-10-24 11:11:33,215 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-10-24 11:11:33,215 INFO sqlalchemy.engine.Engine INSERT INTO rewards (id, name, description, points_value, image_url, cost_type, cost_value, stock_quantity, category, is_active, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-24 11:11:33,216 INFO sqlalchemy.engine.Engine [cached since 0.7295s ago] ('1ae36096827d424bb006bbc61cd8fe48', '外键测试奖励', None, 50, None, None, None, 0, None, 1, '2025-10-24 03:11:33.215691', '2025-10-24 03:11:33.215699')
2025-10-24 11:11:33,216 INFO sqlalchemy.engine.Engine ROLLBACK
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2702 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("auth")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("auth_audit_logs")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("tasks")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("rewards")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("reward_recipes")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("reward_transactions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("points_transactions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("task_top3")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("focus_sessions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2708 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2702 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1846 INSERT INTO rewards (id, name, description, points_value, image_url, cost_type, cost_value, stock_quantity, category, is_active, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
INFO     sqlalchemy.engine.Engine:base.py:1846 [cached since 0.7295s ago] ('1ae36096827d424bb006bbc61cd8fe48', '外键测试奖励', None, 50, None, None, None, 0, None, 1, '2025-10-24 03:11:33.215691', '2025-10-24 03:11:33.215699')
INFO     sqlalchemy.engine.Engine:base.py:2705 ROLLBACK
__________ TestDatabaseIntegration.test_json_field_complex_structure ___________
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
    cursor.execute(statement, parameters)
E   sqlite3.ProgrammingError: Error binding parameter 1: type 'UUID' is not supported

The above exception was the direct cause of the following exception:
tests/database/test_integration.py:314: in test_json_field_complex_structure
    session.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2030: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:137: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1311: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:137: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1286: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4331: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4466: in _flush
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4427: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1048: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.ProgrammingError: (sqlite3.ProgrammingError) Error binding parameter 1: type 'UUID' is not supported
E   [SQL: INSERT INTO tasks (id, created_at, updated_at, user_id, title, description, parent_id, status, priority, is_deleted, completion_percentage, last_claimed_date, tags, service_ids, due_date, planned_start_time, planned_end_time) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
E   [parameters: (UUID('67799f12-b324-4f68-b1ab-0866f2148614'), '2025-10-24 03:11:33.470492', '2025-10-24 03:11:33.470500', UUID('bcf56eba-529d-43b3-a708-3ac1533c2389'), '复杂JSON测试', None, None, 'pending', 'medium', 0, 0.0, None, '["\\u5de5\\u4f5c", "\\u91cd\\u8981", "\\u9879\\u76eeA", "\\u5b50\\u4efb\\u52a11", "\\u5b50\\u4efb\\u52a12"]', '[{"service_id": "service-001", "priority": "high"}, {"service_id": "service-002", "priority": "medium"}]', None, None, None)]
E   (Background on this error at: https://sqlalche.me/e/20/f405)
----------------------------- Captured stdout call -----------------------------
2025-10-24 11:11:33,469 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-10-24 11:11:33,469 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("auth")
2025-10-24 11:11:33,469 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,469 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("auth_audit_logs")
2025-10-24 11:11:33,469 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,469 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("tasks")
2025-10-24 11:11:33,469 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,469 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("rewards")
2025-10-24 11:11:33,469 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,469 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("reward_recipes")
2025-10-24 11:11:33,469 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,469 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("reward_transactions")
2025-10-24 11:11:33,469 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,470 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("points_transactions")
2025-10-24 11:11:33,470 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,470 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("task_top3")
2025-10-24 11:11:33,470 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,470 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("focus_sessions")
2025-10-24 11:11:33,470 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,470 INFO sqlalchemy.engine.Engine COMMIT
2025-10-24 11:11:33,470 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-10-24 11:11:33,470 INFO sqlalchemy.engine.Engine INSERT INTO tasks (id, created_at, updated_at, user_id, title, description, parent_id, status, priority, is_deleted, completion_percentage, last_claimed_date, tags, service_ids, due_date, planned_start_time, planned_end_time) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-24 11:11:33,470 INFO sqlalchemy.engine.Engine [cached since 1.211s ago] (UUID('67799f12-b324-4f68-b1ab-0866f2148614'), '2025-10-24 03:11:33.470492', '2025-10-24 03:11:33.470500', UUID('bcf56eba-529d-43b3-a708-3ac1533c2389'), '复杂JSON测试', None, None, 'pending', 'medium', 0, 0.0, None, '["\\u5de5\\u4f5c", "\\u91cd\\u8981", "\\u9879\\u76eeA", "\\u5b50\\u4efb\\u52a11", "\\u5b50\\u4efb\\u52a12"]', '[{"service_id": "service-001", "priority": "high"}, {"service_id": "service-002", "priority": "medium"}]', None, None, None)
2025-10-24 11:11:33,470 INFO sqlalchemy.engine.Engine ROLLBACK
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2702 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("auth")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("auth_audit_logs")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("tasks")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("rewards")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("reward_recipes")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("reward_transactions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("points_transactions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("task_top3")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("focus_sessions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2708 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2702 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1846 INSERT INTO tasks (id, created_at, updated_at, user_id, title, description, parent_id, status, priority, is_deleted, completion_percentage, last_claimed_date, tags, service_ids, due_date, planned_start_time, planned_end_time) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
INFO     sqlalchemy.engine.Engine:base.py:1846 [cached since 1.211s ago] (UUID('67799f12-b324-4f68-b1ab-0866f2148614'), '2025-10-24 03:11:33.470492', '2025-10-24 03:11:33.470500', UUID('bcf56eba-529d-43b3-a708-3ac1533c2389'), '复杂JSON测试', None, None, 'pending', 'medium', 0, 0.0, None, '["\\u5de5\\u4f5c", "\\u91cd\\u8981", "\\u9879\\u76eeA", "\\u5b50\\u4efb\\u52a11", "\\u5b50\\u4efb\\u52a12"]', '[{"service_id": "service-001", "priority": "high"}, {"service_id": "service-002", "priority": "medium"}]', None, None, None)
INFO     sqlalchemy.engine.Engine:base.py:2705 ROLLBACK
__________ TestDatabaseIntegration.test_datetime_timezone_consistency __________
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
    cursor.execute(statement, parameters)
E   sqlite3.ProgrammingError: Error binding parameter 3: type 'UUID' is not supported

The above exception was the direct cause of the following exception:
tests/database/test_integration.py:356: in test_datetime_timezone_consistency
    session.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2030: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:137: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1311: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:137: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1286: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4331: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4466: in _flush
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4427: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1048: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1419: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.ProgrammingError: (sqlite3.ProgrammingError) Error binding parameter 3: type 'UUID' is not supported
E   [SQL: INSERT INTO points_transactions (id, updated_at, user_id, amount, source_type, source_id, created_at) VALUES (?, ?, ?, ?, ?, ?, ?)]
E   [parameters: ('8dc186bfaa0f49cd94642f8c13082c7b', '2025-10-24 03:11:33.700743', UUID('c3a3f0ab-9830-4b3d-8074-e8578675dcbe'), 10, 'test', None, '2025-10-24 03:11:33.700687')]
E   (Background on this error at: https://sqlalche.me/e/20/f405)
----------------------------- Captured stdout call -----------------------------
2025-10-24 11:11:33,699 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-10-24 11:11:33,699 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("auth")
2025-10-24 11:11:33,699 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,699 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("auth_audit_logs")
2025-10-24 11:11:33,699 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,699 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("tasks")
2025-10-24 11:11:33,699 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,699 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("rewards")
2025-10-24 11:11:33,700 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,700 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("reward_recipes")
2025-10-24 11:11:33,700 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,700 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("reward_transactions")
2025-10-24 11:11:33,700 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,700 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("points_transactions")
2025-10-24 11:11:33,700 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,700 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("task_top3")
2025-10-24 11:11:33,700 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,700 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("focus_sessions")
2025-10-24 11:11:33,700 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-10-24 11:11:33,700 INFO sqlalchemy.engine.Engine COMMIT
2025-10-24 11:11:33,700 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-10-24 11:11:33,701 INFO sqlalchemy.engine.Engine INSERT INTO points_transactions (id, updated_at, user_id, amount, source_type, source_id, created_at) VALUES (?, ?, ?, ?, ?, ?, ?)
2025-10-24 11:11:33,701 INFO sqlalchemy.engine.Engine [generated in 0.00007s] ('8dc186bfaa0f49cd94642f8c13082c7b', '2025-10-24 03:11:33.700743', UUID('c3a3f0ab-9830-4b3d-8074-e8578675dcbe'), 10, 'test', None, '2025-10-24 03:11:33.700687')
2025-10-24 11:11:33,701 INFO sqlalchemy.engine.Engine ROLLBACK
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2702 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("auth")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("auth_audit_logs")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("tasks")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("rewards")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("reward_recipes")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("reward_transactions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("points_transactions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("task_top3")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1846 PRAGMA main.table_info("focus_sessions")
INFO     sqlalchemy.engine.Engine:base.py:1846 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2708 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2702 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1846 INSERT INTO points_transactions (id, updated_at, user_id, amount, source_type, source_id, created_at) VALUES (?, ?, ?, ?, ?, ?, ?)
INFO     sqlalchemy.engine.Engine:base.py:1846 [generated in 0.00007s] ('8dc186bfaa0f49cd94642f8c13082c7b', '2025-10-24 03:11:33.700743', UUID('c3a3f0ab-9830-4b3d-8074-e8578675dcbe'), 10, 'test', None, '2025-10-24 03:11:33.700687')
INFO     sqlalchemy.engine.Engine:base.py:2705 ROLLBACK
_________ TestChatDatabaseModule.test_get_chat_database_path_absolute __________
tests/domains/chat/test_chat_database.py:61: in test_get_chat_database_path_absolute
    assert path == absolute_path
E   AssertionError: assert '/Users/zalel.../data/chat.db' == '/tmp/test_chat.db'
E     
E     - /tmp/test_chat.db
E     + /Users/zalelee/Code/tatake_backend/data/chat.db
___________ TestChatDatabaseModule.test_get_database_info_with_file ____________
tests/domains/chat/test_chat_database.py:123: in test_get_database_info_with_file
    assert info["file_size_bytes"] > 0
E   assert 0 > 0
______________ TestChatDatabaseModule.test_create_tables_success _______________
tests/domains/chat/test_chat_database.py:132: in test_create_tables_success
    assert result is True
E   assert False is True
------------------------------ Captured log call -------------------------------
WARNING  src.domains.chat.database:database.py:134 聊天数据库文件不存在: /var/folders/zn/kh5c330d475c691bmnm67s300000gn/T/tmpr8okreab/test_chat.db
ERROR    src.domains.chat.database:database.py:329 聊天数据库连接验证失败
___________ TestChatDatabaseManager.test_manager_create_checkpointer ___________
tests/domains/chat/test_chat_database.py:171: in test_manager_create_checkpointer
    assert hasattr(checkpointer, 'put') and hasattr(checkpointer, 'get')
E   AssertionError: assert (False)
E    +  where False = hasattr(<contextlib._GeneratorContextManager object at 0x1141bc5c0>, 'put')
______________ TestChatDatabaseManager.test_health_check_healthy _______________
tests/domains/chat/test_chat_database.py:192: in test_health_check_healthy
    assert result["status"] == "healthy"
E   AssertionError: assert 'unhealthy' == 'healthy'
E     
E     - healthy
E     + unhealthy
E     ? ++
------------------------------ Captured log call -------------------------------
WARNING  src.domains.chat.database:database.py:134 聊天数据库文件不存在: /Users/zalelee/Code/tatake_backend/data/chat.db
_____________________ TestChatDatabaseManager.test_cleanup _____________________
tests/domains/chat/test_chat_database.py:227: in test_cleanup
    assert manager._store is None
E   assert <langgraph.store.memory.InMemoryStore object at 0x1141bac10> is None
E    +  where <langgraph.store.memory.InMemoryStore object at 0x1141bac10> = <src.domains.chat.database.ChatDatabaseManager object at 0x1141b3620>._store
------------------------------ Captured log call -------------------------------
ERROR    src.domains.chat.database:database.py:307 清理聊天数据库资源失败: 'ChatDatabaseManager' object has no attribute '_checkpointer'
_____________ TestChatDatabaseIntegration.test_end_to_end_workflow _____________
tests/domains/chat/test_chat_database.py:252: in test_end_to_end_workflow
    assert create_tables() is True
E   assert False is True
E    +  where False = create_tables()
------------------------------ Captured log call -------------------------------
WARNING  src.domains.chat.database:database.py:134 聊天数据库文件不存在: /var/folders/zn/kh5c330d475c691bmnm67s300000gn/T/tmpca9cnj5g/test_chat.db
ERROR    src.domains.chat.database:database.py:329 聊天数据库连接验证失败
______________ TestChatDatabaseIntegration.test_concurrent_access ______________
tests/domains/chat/test_chat_database.py:323: in test_concurrent_access
    assert success_count >= 3  # 允许一些失败
    ^^^^^^^^^^^^^^^^^^^^^^^^^
E   assert 0 >= 3
------------------------------ Captured log call -------------------------------
WARNING  src.domains.chat.database:database.py:134 聊天数据库文件不存在: /var/folders/zn/kh5c330d475c691bmnm67s300000gn/T/tmp00q881u1/test_chat.db
WARNING  src.domains.chat.database:database.py:134 聊天数据库文件不存在: /var/folders/zn/kh5c330d475c691bmnm67s300000gn/T/tmp00q881u1/test_chat.db
WARNING  src.domains.chat.database:database.py:134 聊天数据库文件不存在: /var/folders/zn/kh5c330d475c691bmnm67s300000gn/T/tmp00q881u1/test_chat.db
WARNING  src.domains.chat.database:database.py:134 聊天数据库文件不存在: /var/folders/zn/kh5c330d475c691bmnm67s300000gn/T/tmp00q881u1/test_chat.db
WARNING  src.domains.chat.database:database.py:134 聊天数据库文件不存在: /var/folders/zn/kh5c330d475c691bmnm67s300000gn/T/tmp00q881u1/test_chat.db
=============================== warnings summary ===============================
src/domains/task/schemas.py:135
  /Users/zalelee/Code/tatake_backend/src/domains/task/schemas.py:135: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    @validator('tags')

src/domains/task/schemas.py:244
  /Users/zalelee/Code/tatake_backend/src/domains/task/schemas.py:244: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    @validator('tags')

.venv/lib/python3.12/site-packages/sqlmodel/main.py:542
  /Users/zalelee/Code/tatake_backend/.venv/lib/python3.12/site-packages/sqlmodel/main.py:542: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    new_cls = super().__new__(cls, name, bases, dict_used, **config_kwargs)

<frozen abc>:106
  <frozen abc>:106: LangGraphDeprecatedSinceV10: AgentStatePydantic has been moved to `langchain.agents`. Please update your import to `from langchain.agents import AgentStatePydantic`. Deprecated in LangGraph V1.0 to be removed in V2.0.

src/domains/chat/models.py:32
  /Users/zalelee/Code/tatake_backend/src/domains/chat/models.py:32: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class ChatMessage(BaseModel):

.venv/lib/python3.12/site-packages/pydantic/_internal/_generate_schema.py:319
.venv/lib/python3.12/site-packages/pydantic/_internal/_generate_schema.py:319
.venv/lib/python3.12/site-packages/pydantic/_internal/_generate_schema.py:319
.venv/lib/python3.12/site-packages/pydantic/_internal/_generate_schema.py:319
.venv/lib/python3.12/site-packages/pydantic/_internal/_generate_schema.py:319
.venv/lib/python3.12/site-packages/pydantic/_internal/_generate_schema.py:319
.venv/lib/python3.12/site-packages/pydantic/_internal/_generate_schema.py:319
.venv/lib/python3.12/site-packages/pydantic/_internal/_generate_schema.py:319
  /Users/zalelee/Code/tatake_backend/.venv/lib/python3.12/site-packages/pydantic/_internal/_generate_schema.py:319: PydanticDeprecatedSince20: `json_encoders` is deprecated. See https://docs.pydantic.dev/2.12/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    warnings.warn(

src/domains/chat/models.py:61
  /Users/zalelee/Code/tatake_backend/src/domains/chat/models.py:61: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class ChatSession(BaseModel):

src/domains/chat/models.py:176
  /Users/zalelee/Code/tatake_backend/src/domains/chat/models.py:176: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class ToolCallResult(BaseModel):

src/domains/chat/schemas.py:35
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:35: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    title: Optional[str] = Field(

src/domains/chat/schemas.py:54
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:54: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    message: str = Field(

src/domains/chat/schemas.py:62
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:62: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    @validator('message')

src/domains/chat/schemas.py:83
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:83: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    session_id: str = Field(

src/domains/chat/schemas.py:89
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:89: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    title: str = Field(

src/domains/chat/schemas.py:95
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:95: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    created_at: str = Field(

src/domains/chat/schemas.py:101
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:101: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    welcome_message: str = Field(

src/domains/chat/schemas.py:107
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:107: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    status: str = Field(

src/domains/chat/schemas.py:129
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:129: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    session_id: str = Field(

src/domains/chat/schemas.py:135
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:135: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    user_message: str = Field(

src/domains/chat/schemas.py:141
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:141: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    ai_response: str = Field(

src/domains/chat/schemas.py:147
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:147: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    timestamp: str = Field(

src/domains/chat/schemas.py:153
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:153: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    status: str = Field(

src/domains/chat/schemas.py:175
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:175: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    type: str = Field(

src/domains/chat/schemas.py:181
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:181: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    content: str = Field(

src/domains/chat/schemas.py:187
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:187: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    timestamp: str = Field(

src/domains/chat/schemas.py:207
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:207: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    session_id: str = Field(

src/domains/chat/schemas.py:218
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:218: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    total_count: int = Field(

src/domains/chat/schemas.py:224
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:224: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    limit: int = Field(

src/domains/chat/schemas.py:230
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:230: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    timestamp: str = Field(

src/domains/chat/schemas.py:236
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:236: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    status: str = Field(

src/domains/chat/schemas.py:270
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:270: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    session_id: str = Field(

src/domains/chat/schemas.py:276
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:276: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    title: str = Field(

src/domains/chat/schemas.py:282
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:282: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    message_count: int = Field(

src/domains/chat/schemas.py:288
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:288: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    created_at: str = Field(

src/domains/chat/schemas.py:294
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:294: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    updated_at: str = Field(

src/domains/chat/schemas.py:300
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:300: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    status: str = Field(

src/domains/chat/schemas.py:323
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:323: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    session_id: str = Field(

src/domains/chat/schemas.py:329
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:329: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    title: str = Field(

src/domains/chat/schemas.py:335
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:335: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    message_count: int = Field(

src/domains/chat/schemas.py:341
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:341: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    created_at: str = Field(

src/domains/chat/schemas.py:347
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:347: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    updated_at: str = Field(

src/domains/chat/schemas.py:369
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:369: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    user_id: str = Field(

src/domains/chat/schemas.py:380
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:380: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    total_count: int = Field(

src/domains/chat/schemas.py:386
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:386: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    limit: int = Field(

src/domains/chat/schemas.py:392
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:392: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    timestamp: str = Field(

src/domains/chat/schemas.py:398
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:398: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    status: str = Field(

src/domains/chat/schemas.py:404
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:404: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    note: str = Field(

src/domains/chat/schemas.py:436
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:436: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    session_id: str = Field(

src/domains/chat/schemas.py:442
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:442: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    status: str = Field(

src/domains/chat/schemas.py:448
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:448: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    timestamp: str = Field(

src/domains/chat/schemas.py:454
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:454: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    note: str = Field(

src/domains/chat/schemas.py:475
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:475: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    status: str = Field(

src/domains/chat/schemas.py:486
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:486: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    graph_initialized: bool = Field(

src/domains/chat/schemas.py:492
  /Users/zalelee/Code/tatake_backend/src/domains/chat/schemas.py:492: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    timestamp: str = Field(

src/domains/focus/schemas.py:45
  /Users/zalelee/Code/tatake_backend/src/domains/focus/schemas.py:45: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    @validator('task_id')

src/domains/focus/schemas.py:53
  /Users/zalelee/Code/tatake_backend/src/domains/focus/schemas.py:53: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class FocusSessionResponse(BaseModel):

src/domains/focus/schemas.py:87
  /Users/zalelee/Code/tatake_backend/src/domains/focus/schemas.py:87: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class FocusOperationResponse(BaseModel):

src/domains/focus/schemas.py:109
  /Users/zalelee/Code/tatake_backend/src/domains/focus/schemas.py:109: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class FocusSessionListResponse(BaseModel):

tests/e2e/test_boundary_conditions.py:17
  /Users/zalelee/Code/tatake_backend/tests/e2e/test_boundary_conditions.py:17: PytestUnknownMarkWarning: Unknown pytest.mark.boundary - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.boundary

tests/e2e/test_boundary_conditions.py:85
  /Users/zalelee/Code/tatake_backend/tests/e2e/test_boundary_conditions.py:85: PytestUnknownMarkWarning: Unknown pytest.mark.boundary - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.boundary

tests/e2e/test_boundary_conditions.py:174
  /Users/zalelee/Code/tatake_backend/tests/e2e/test_boundary_conditions.py:174: PytestUnknownMarkWarning: Unknown pytest.mark.boundary - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.boundary

tests/e2e/test_boundary_conditions.py:249
  /Users/zalelee/Code/tatake_backend/tests/e2e/test_boundary_conditions.py:249: PytestUnknownMarkWarning: Unknown pytest.mark.boundary - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.boundary

tests/scenarios/conftest.py:151
  /Users/zalelee/Code/tatake_backend/tests/scenarios/conftest.py:151: PytestUnknownMarkWarning: Unknown pytest.mark.scenario - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    pytest.mark.scenario = pytest.mark.scenario

tests/scenarios/conftest.py:152
  /Users/zalelee/Code/tatake_backend/tests/scenarios/conftest.py:152: PytestUnknownMarkWarning: Unknown pytest.mark.task_flow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    pytest.mark.task_flow = pytest.mark.task_flow

tests/scenarios/conftest.py:153
  /Users/zalelee/Code/tatake_backend/tests/scenarios/conftest.py:153: PytestUnknownMarkWarning: Unknown pytest.mark.top3_flow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    pytest.mark.top3_flow = pytest.mark.top3_flow

tests/scenarios/conftest.py:154
  /Users/zalelee/Code/tatake_backend/tests/scenarios/conftest.py:154: PytestUnknownMarkWarning: Unknown pytest.mark.combined_flow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    pytest.mark.combined_flow = pytest.mark.combined_flow

tests/scenarios/conftest.py:155
  /Users/zalelee/Code/tatake_backend/tests/scenarios/conftest.py:155: PytestUnknownMarkWarning: Unknown pytest.mark.focus_flow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    pytest.mark.focus_flow = pytest.mark.focus_flow

tests/scenarios/test_00_user_registration_to_task_flow.py:34
  /Users/zalelee/Code/tatake_backend/tests/scenarios/test_00_user_registration_to_task_flow.py:34: PytestUnknownMarkWarning: Unknown pytest.mark.user_flow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    pytestmark = [pytest.mark.scenario, pytest.mark.user_flow]

src/domains/chat/models.py:32
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/models.py:32: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class ChatMessage(BaseModel):

src/domains/chat/models.py:61
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/models.py:61: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class ChatSession(BaseModel):

src/domains/chat/models.py:176
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/models.py:176: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class ToolCallResult(BaseModel):

src/domains/chat/schemas.py:35
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:35: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    title: Optional[str] = Field(

src/domains/chat/schemas.py:54
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:54: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    message: str = Field(

src/domains/chat/schemas.py:62
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:62: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    @validator('message')

src/domains/chat/schemas.py:83
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:83: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    session_id: str = Field(

src/domains/chat/schemas.py:89
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:89: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    title: str = Field(

src/domains/chat/schemas.py:95
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:95: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    created_at: str = Field(

src/domains/chat/schemas.py:101
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:101: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    welcome_message: str = Field(

src/domains/chat/schemas.py:107
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:107: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    status: str = Field(

src/domains/chat/schemas.py:129
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:129: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    session_id: str = Field(

src/domains/chat/schemas.py:135
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:135: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    user_message: str = Field(

src/domains/chat/schemas.py:141
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:141: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    ai_response: str = Field(

src/domains/chat/schemas.py:147
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:147: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    timestamp: str = Field(

src/domains/chat/schemas.py:153
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:153: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    status: str = Field(

src/domains/chat/schemas.py:175
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:175: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    type: str = Field(

src/domains/chat/schemas.py:181
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:181: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    content: str = Field(

src/domains/chat/schemas.py:187
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:187: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    timestamp: str = Field(

src/domains/chat/schemas.py:207
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:207: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    session_id: str = Field(

src/domains/chat/schemas.py:218
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:218: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    total_count: int = Field(

src/domains/chat/schemas.py:224
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:224: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    limit: int = Field(

src/domains/chat/schemas.py:230
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:230: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    timestamp: str = Field(

src/domains/chat/schemas.py:236
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:236: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    status: str = Field(

src/domains/chat/schemas.py:270
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:270: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    session_id: str = Field(

src/domains/chat/schemas.py:276
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:276: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    title: str = Field(

src/domains/chat/schemas.py:282
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:282: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    message_count: int = Field(

src/domains/chat/schemas.py:288
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:288: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    created_at: str = Field(

src/domains/chat/schemas.py:294
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:294: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    updated_at: str = Field(

src/domains/chat/schemas.py:300
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:300: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    status: str = Field(

src/domains/chat/schemas.py:323
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:323: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    session_id: str = Field(

src/domains/chat/schemas.py:329
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:329: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    title: str = Field(

src/domains/chat/schemas.py:335
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:335: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    message_count: int = Field(

src/domains/chat/schemas.py:341
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:341: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    created_at: str = Field(

src/domains/chat/schemas.py:347
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:347: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    updated_at: str = Field(

src/domains/chat/schemas.py:369
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:369: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    user_id: str = Field(

src/domains/chat/schemas.py:380
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:380: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    total_count: int = Field(

src/domains/chat/schemas.py:386
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:386: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    limit: int = Field(

src/domains/chat/schemas.py:392
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:392: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    timestamp: str = Field(

src/domains/chat/schemas.py:398
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:398: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    status: str = Field(

src/domains/chat/schemas.py:404
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:404: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    note: str = Field(

src/domains/chat/schemas.py:436
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:436: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    session_id: str = Field(

src/domains/chat/schemas.py:442
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:442: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    status: str = Field(

src/domains/chat/schemas.py:448
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:448: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    timestamp: str = Field(

src/domains/chat/schemas.py:454
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:454: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    note: str = Field(

src/domains/chat/schemas.py:475
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:475: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    status: str = Field(

src/domains/chat/schemas.py:486
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:486: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    graph_initialized: bool = Field(

src/domains/chat/schemas.py:492
  /Users/zalelee/Code/tatake_backend/tests/../src/domains/chat/schemas.py:492: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    timestamp: str = Field(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/database/test_connection.py::TestDatabaseConnection::test_get_engine_creates_engine
FAILED tests/database/test_connection.py::TestDatabaseConnection::test_database_connection_with_postgresql_url
FAILED tests/database/test_connection.py::TestDatabaseConnection::test_database_connection_with_mysql_config
FAILED tests/database/test_connection.py::TestDatabaseConnection::test_engine_other_exceptions
FAILED tests/database/test_integration.py::TestDatabaseIntegration::test_task_model_database_operations
FAILED tests/database/test_integration.py::TestDatabaseIntegration::test_json_field_operations
FAILED tests/database/test_integration.py::TestDatabaseIntegration::test_sum_aggregation_query
FAILED tests/database/test_integration.py::TestDatabaseIntegration::test_unique_constraint
FAILED tests/database/test_integration.py::TestDatabaseIntegration::test_transaction_rollback
FAILED tests/database/test_integration.py::TestDatabaseIntegration::test_foreign_key_constraints
FAILED tests/database/test_integration.py::TestDatabaseIntegration::test_json_field_complex_structure
FAILED tests/database/test_integration.py::TestDatabaseIntegration::test_datetime_timezone_consistency
FAILED tests/domains/chat/test_chat_database.py::TestChatDatabaseModule::test_get_chat_database_path_absolute
FAILED tests/domains/chat/test_chat_database.py::TestChatDatabaseModule::test_get_database_info_with_file
FAILED tests/domains/chat/test_chat_database.py::TestChatDatabaseModule::test_create_tables_success
FAILED tests/domains/chat/test_chat_database.py::TestChatDatabaseManager::test_manager_create_checkpointer
FAILED tests/domains/chat/test_chat_database.py::TestChatDatabaseManager::test_health_check_healthy
FAILED tests/domains/chat/test_chat_database.py::TestChatDatabaseManager::test_cleanup
FAILED tests/domains/chat/test_chat_database.py::TestChatDatabaseIntegration::test_end_to_end_workflow
FAILED tests/domains/chat/test_chat_database.py::TestChatDatabaseIntegration::test_concurrent_access
!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 20 failures !!!!!!!!!!!!!!!!!!!!!!!!!!
================= 20 failed, 63 passed, 122 warnings in 2.23s ==================
